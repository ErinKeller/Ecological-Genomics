head(conds) # conds for conditions
colData <- as.data.frame(conds) # turn it into a data frame so it can be run with the program
head(colData)
colData$group <- factor(paste0(colData$location, ".", colData$health, ".", colData$score))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
res <- results(dds, contrast=list( c("groupint.H.0","groupsub.H.0"), c("groupint.S.1","groupsub.S.1")), listValues=c(1/2, -1/2))
res <- res[order(res$padj),]
head(res)
summary(res)
ddsTS <- DESeqDataSetFromMatrix(countData = countData, colData = colData, ~ health + day + health:day)
ddsTS <- ddsTS[ rowSums(counts(ddsTS)) > 100, ]
ddsTS <- ddsTS[sample(nrow(ddsTS), 1200), ]
dim(ddsTS)
ddsTS <- DESeq(ddsTS, parallel=T, test="LRT", reduced = ~ health + day)
source('C:/Users/Erin/OneDrive/Documents/UVM/UVM Spring 2017/Ecological Genomics/PBIO DATA/DESeq2_SSW_round2.R')
plotMA(res, main="DESeq2", ylim=c(-2,2))
d <- plotCounts(dds, gene="TRINITY_DN44744_c1_g2_TRINITY_DN44744_c1_g2_i2_g.17686_m.17686", intgroup=(c("health","day","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + ylim(0,500)
p
plotPCA(vsd, intgroup=c("score"))
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("score"))
plotPCA(vsd, intgroup=c("score"))
plotPCA(vsd, intgroup=c("health"))
plotMA(res, main="DESeq2", ylim=c(-2,2))
d <- plotCounts(dds, gene="TRINITY_DN44744_c1_g2_TRINITY_DN44744_c1_g2_i2_g.17686_m.17686", intgroup=(c("health","day","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + ylim(0,500)
p
d <- plotCounts(dds, gene="TRINITY_DN46245_c3_g3_TRINITY_DN46245_c3_g3_i2_g.21719_m.21719", intgroup=(c("health","score","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= score, y=count, shape = health, color = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
p <- ggplot(d, aes(x=score, y=count, color=health, group=health))
p <- p +  geom_point() + stat_smooth(se=FALSE,method="loess") +  scale_y_log10()
p
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("score"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
options(stringsAsFactors = FALSE);
StarData = read.csv("norm.counts.csv");
starData = read.csv("norm.counts.csv");
dim(starData);
names(starData);
datExpr0 = as.data.frame(t(femData[, -c(1:8)]));
sdatExpr0 = as.data.frame(t(starData[, -c(1:1)]));
dim(sdatExpr0)
names(sdatExpr0) = starData$X;
rownames(sdatExpr0) = names(starData)[-c(1:1)];
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3); # sgsg denotes our data run this one!
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3); # sgsg denotes our data run this one!
sdatExpr0 = as.data.frame(t(starData[, -c(1:1)]));
dim(sdatExpr0)
names(sdatExpr0) = starData$X;
rownames(sdatExpr0) = names(starData)[-c(1:1)];
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3); # sgsg denotes our data run this one!
sgsg$allOK
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3); # sgsg denotes our data run this one!
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3); # sgsg denotes our data run this one!
help(goodSamplesGenes)
??goodSamplesGenes
library(wgcna)
library("WGCNA")
("WGCNA")
library("WGCNA")
library("WGCNA")
install.packages("WGCNA")
library("WGCNA")
library(WGCNA);
options(stringsAsFactors = FALSE);
starData = read.csv("norm.counts.csv");
dim(starData);
names(starData);
sdatExpr0 = as.data.frame(t(starData[, -c(1:1)]));
dim(sdatExpr0)
names(sdatExpr0) = starData$X;
rownames(sdatExpr0) = names(starData)[-c(1:1)];
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3); # sgsg denotes our data run this one!
sgsg$allOK
if (!sgsg$allOK)
{
# Optionally, print the gene and sample names that were removed:
if (sum(!sgsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(sdatExpr0)[!sgsg$goodGenes], collapse = ", ")));
if (sum(!sgsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(sdatExpr0)[!sgsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[sgsg$goodSamples, sgsg$goodGenes]
}
sampleTree = hclust(dist(sdatExpr0), method = "average");
sizeGrWindow(12,9)
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
abline(h = 10, col = "red");
clust = cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
table(clust)
keepSamples = (clust==1)
sdatExpr = sdatExpr0[keepSamples, ]
nGenes = ncol(sdatExpr)
nSamples = nrow(sdatExpr)
traitData = read.csv("ClinicalTraits.csv");
straitData = read.table("cols_data_trim.txt");
dim(straitData)
names(straitData)
starSamples = rownames(sdatExpr);
straitData = read.table("cols_data_trim.txt");
summary(resInt)
library(DESeq2)
library("ggplot2")
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
colData <- as.data.frame(conds)
head(conds)
head(colData)
head(IntConds)
dim(IntConds)
SubConds <- conds[conds$location == "sub",]
head(SubConds)
dim(SubConds)
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
dim(countsTable)
countData <- as.matrix(countsTable)
head(countData)
IntcountData<-countData[, which(colnames(countData) %in% row.names(IntConds))]
SubcountData<-countData[, -which(colnames(countData) %in% row.names(IntConds))]
dim(IntcountData)
install.packages("vcfR")
install.packages("adegenet")
Rom <- read.csv("Romiguier_nature13685-s3.csv", header=T)
str(Rom)
head(Rom)
plot(log(Rom$piS), log(Rom$piNpiS), pch=21, bg="blue", xlab="log Synonymous Nucleotide Diversity (piS)", ylab="log Ratio of Nonysn to Syn Diversity (piN/piS)", main="Purifying Selection vs. Effective Population Size")
points(log(0.00585312), log(0.264041), pch=24, cex=1.5, bg="red") # points command adds data points onto an existing graph
reg <- lm(log(Rom$piNpiS) ~ log(Rom$piS)) # Fits a linear regression
abline(reg) # adds the regression line to the plot
echino <- Rom[which(Rom$Phylum=="Echinodermata"),] # subsets the data to select only species of the phylum Echinodermata
points(log(echino$piS), log(echino$piNpiS), pch=21, bg="red") # adds the points
legend("bottomleft", cex=1, legend=c("Metazoans", "Echinoderms", "P. ochraceus"), pch=c(21,21,24), col=c("blue", "red", "red"))
Ne <- 0.00585/(4*4*10^-9)
print(Ne)
install.packages("vcfR") # reads in vcf files and proides tools for file conversion
install.packages("adegenet") # pop-genetics package with some handy routines, including PCA and other multivariate methods (DAPC)
library(vcfR)
library(adegenet)
vcf1 <- read.vcfR("SSW_all_biallelic.MAF0.02.Miss0.8.recode.vcf")
gl1 <- vcfR2genlight(vcf1)
print(gl1) # Looks good! Right # of SNPs and individuals!
gl1$ind.names
gl1$loc.names[1:10]
gl1$chromosome[1:3]
ssw_meta <- read.table("ssw_healthloc.txt", header=T) # read in the metadata
str(ssw_meta)
ssw_meta <- ssw_meta[order(ssw_meta$Individual),] # sort by Individual ID, just like the VCF file
gl1$ind.names
ssw_meta$Individual
gl1$pop <- ssw_meta$Location # assign localtion info
gl1$other <- as.list(ssw_meta$Trajectory) # assign disease status
glPlot(gl1, posi="bottomleft")
pca1 <- glPca(gl1, nf=4) # nf = number of PC axes to retain (here, 4)
pca1 # prints summary
pca1 <- glPca(gl1, nf=4, n.cores=1) # nf = number of PC axes to retain (here, 4)
pca1 <- glPca(gl1, nf=4, n.cores=NULL) # nf = number of PC axes to retain (here, 4)
pca1 <- glPca(gl1, nf=4, parellel = FALSE) # nf = number of PC axes to retain (here, 4)
pca1 <- glPca(gl1, nf=4, parallel = FALSE) # nf = number of PC axes to retain (here, 4)
pca1 # prints summary # includes the loading which allowsyou to look at specific SNPs
plot(pca1$scores[,1], pca1$scores[,2],
cex=2, pch=20, col=gl1$pop,
xlab="Principal Component 1",
ylab="Principal Component 2",
main="PCA on SSW data (Freq missing=20%; 5317 SNPs)")
legend("topleft",
legend=unique(gl1$pop),
pch=20,
col=c("black", "red"))
plot(pca1$scores[,1], pca1$scores[,2],
cex=2, pch=20, col=as.factor(gl1$other$Trajectory),
xlab="Principal Component 1",
ylab="Principal Component 2",
main="PCA on SSW data (Freq missing=20%; 5317 SNPs)")
legend("topleft",
legend=unique(gl1$other$Trajectory),
pch=20,
col=as.factor(unique(gl1$other$Trajectory)))
plot(pca1$scores[,1], pca1$scores[,2],
cex=2, pch=20, col=as.factor(gl1$other$Trajectory),
xlab="Principal Component 1",
ylab="Principal Component 2",
main="PCA on SSW data (Freq missing=20%; 5317 SNPs)")
plot(pca1$scores[,1], pca1$scores[,2],
cex=2, pch=20, col=as.factor(gl1$other$Trajectory),
xlab="Principal Component 1",
ylab="Principal Component 2",
main="PCA on SSW data (Freq missing=20%; 5317 SNPs)")
legend("topleft",
legend=unique(gl1$other$Trajectory),
pch=20,
col=as.factor(unique(gl1$other$Trajectory)))
plot(pca1$scores[,1], pca1$scores[,2],
cex=2, pch=20, col=as.factor(unlist(gl1$other)),
xlab="Principal Component 1",
ylab="Principal Component 2",
main="PCA on SSW data (Freq missing=20%; 5317 SNPs)")
legend("topleft",
legend=unique(gl1$other$Trajectory),
pch=20,
col=as.factor(unique(gl1$other$Trajectory)))
legend("topleft",
legend=unique(as.factor(unlist(gl1$other))),
pch=20,
col=as.factor(unique(unlist(gl1$other))))
loadingplot(abs(pca1$loadings[,1]),
threshold=quantile(abs(pca1$loadings), 0.999))
gl1$loc.names[which(quantile(abs(pca1$loadings)>0.999)]
gl1$loc.names[which(quantile(abs(pca1$loadings)>0.999)])
gl1$loc.names[which(quantile(abs(pca1$loadings)>0.999))]
gl1$loc.names[which(quantile(abs(pca1$loadings))>0.999)]
gl1$loc.names[which(quantile(abs(pca1$loadings)>0.999)])
gl1$loc.names([which(quantile(abs(pca1$loadings)>0.999)])
gl1$loc.names[which(quantile(abs(pca1$loadings))>0.999)]
gl1$loc.names[which(quantile(abs(pca1$loadings)0.99>0.999)]
threshold=quantile(abs(pca1$loadings), 0.999))
threshold=quantile(abs(pca1$loadings), 0.999)
gl1$loc.names[which(quantile(abs(pca1$loadings)>0.999)]
threshold
gl1$loc.names[which(quantile(abs(pca1$loadings)>0.06776174)]
gl1$loc.names[which(quantile(pca1$loadings)>0.06776174]
gl1$loc.names[which(quantile(abs(pca1$loadings)>threshold)]
gl1$loc.names[which(abs(pca1$loadings)>threshold)]
disease.dapc
disease.dapc <- dapc(gl1, pop=as.factor(unlist(gl1$other)), n.pca=8, n.da=3,
var.loadings=T, pca.info=T)
disease.dapc <- dapc(gl1, pop=as.factor(unlist(gl1$other)), parallel = FALSE, n.pca=8, n.da=3,
var.loadings=T, pca.info=T)
disease.dapc <- dapc(gl1, pop=gl1$other$Trajectory, n.pca=8, n.da=3,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(disease.dapc, grp=gl1$other$Trajectory, legend=T)
library(vcfR)
library(adegenet)
vcf1 <- read.vcfR("SSW_all_biallelic.MAF0.02.Miss0.8.recode.vcf")
gl1 <- vcfR2genlight(vcf1)
print(gl1) # Looks good! Right # of SNPs and individuals!
gl1$ind.names # individual ID's
gl1$loc.names[1:10] # first 10 loci names
gl1$chromosome[1:3] # First three chromsome that eah loci is on
ssw_meta <- read.table("ssw_healthloc.txt", header=T) # read in the metadata
str(ssw_meta) # to get a structure on the file, includes indv, status, location, SNPs,etc.
ssw_meta <- ssw_meta[order(ssw_meta$Individual),] # sort by Individual ID, just like the VCF file. Must be in the same order as the VCF file is.
gl1$ind.names # comparing both of these by printing the files indicate that both files are lined up in terms of individual order.
ssw_meta$Individual
gl1$pop <- ssw_meta$Location # assign localtion info
gl1$other <- as.list(ssw_meta$Trajectory) # assign disease status to the "other" slot
glPlot(gl1, posi="bottomleft") # this generates a heat-map like plot that for every individyal and for every SNP, which loci have missing data (white). 0 counts = reference heterozygote (blue), pink (heterogyote), red indicates derived homozygote
plot(pca1$scores[,1], pca1$scores[,2],
cex=2, pch=20, col=gl1$pop,
xlab="Principal Component 1",
ylab="Principal Component 2",
main="PCA on SSW data (Freq missing=20%; 5317 SNPs)")
legend("topleft",
legend=unique(gl1$pop),
pch=20,
col=c("black", "red"))
plot(pca1$scores[,1], pca1$scores[,2],
cex=2, pch=20, col=as.factor(unlist(gl1$other)),
xlab="Principal Component 1",
ylab="Principal Component 2",
main="PCA on SSW data (Freq missing=20%; 5317 SNPs)")
legend("topleft",
legend=unique(as.factor(unlist(gl1$other))),
pch=20,
col=as.factor(unique(unlist(gl1$other))))
loadingplot(abs(pca1$loadings[,1]),
threshold=quantile(abs(pca1$loadings), 0.999))
threshold=quantile(abs(pca1$loadings), 0.999)
threshold
gl1$loc.names[which(abs(pca1$loadings)>threshold)]
disease.dapc <- dapc(gl1, pop=gl1$other$Trajectory, n.pca=8, n.da=3,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(disease.dapc, grp=gl1$other$Trajectory, legend=T)
install.packages("devtools")
library(devtools)
source("http://bioconductor.org/biocLite.R")
biocLite("qvalue")
a
library(OutFLANK)
library(vcfR)
library(adegenet)
library(OutFLANK)
library(vcfR)
library(adegenet)
install_github("whitlock/OutFLANK")
install_github("whitlock/OutFLANK")
install_github("whitlock/OutFLANK")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
source("http://bioconductor.org/biocLite.R")
biocLite("qvalue")
library(OutFLANK)
library(vcfR)
library(adegenet)
install_github("whitlock/OutFLANK")
library(OutFLANK)
biocLite("qvalue")
install_github("whitlock/OutFLANK")
install.packages("devtools")
library(devtools)
source("http://bioconductor.org/biocLite.R")
biocLite("qvalue")
install_github("whitlock/OutFLANK")
library(OutFLANK)
library(vcfR)
library(adegenet)
install.packages("Rcpp")
install.packages("devtools")
install.packages("devtools")
library(devtools)
source("http://bioconductor.org/biocLite.R")
biocLite("qvalue")
install_github("whitlock/OutFLANK")
install_github("whitlock/OutFLANK")
install_github("whitlock/OutFLANK")
biocLite("qvalue")
install_github("whitlock/OutFLANK")
library(ade4)
biocLite("qvalue")
a
install_github("whitlock/OutFLANK")
K1Q <- read.table("biallelic_hwe0.01.recode.vcf.1.Q")
K2Q <- read.table("biallelic_hwe0.01.recode.vcf.2.Q")
K3Q <- read.table("biallelic_hwe0.01.recode.vcf.3.Q")
K4Q <- read.table("biallelic_hwe0.01.recode.vcf.4.Q")
K5Q <- read.table("biallelic_hwe0.01.recode.vcf.5.Q")
ssw_meta <- read.table("ssw_healthloc.txt", header=T)
par(mfrow=c(3,1))
par(mfrow=c(5,1))
barplot(t(as.matrix(K1Q)),
col=rainbow(2),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
border=NA)
barplot(t(as.matrix(K2Q)),
col=rainbow(2),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
border=NA)
barplot(t(as.matrix(K3Q)),
col=rainbow(3),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
border=NA)
barplot(t(as.matrix(K4Q)),
col=rainbow(3),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
border=NA)
barplot(t(as.matrix(K5Q)),
col=rainbow(3),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
border=NA)
par(mfrow=c(3,1))
barplot(t(as.matrix(K1Q)),
col=rainbow(2),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
border=NA)
barplot(t(as.matrix(K2Q)),
col=rainbow(2),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
border=NA)
barplot(t(as.matrix(K3Q)),
col=rainbow(3),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
border=NA)
K1Q <- read.table("biallelic_maf0.03..recode.vcf.1.Q")
K2Q <- read.table("biallelic_maf0.03..recode.vcf.2.Q")
K3Q <- read.table("biallelic_maf0.03..recode.vcf.3.Q")
ssw_meta <- read.table("ssw_healthloc.txt", header=T)
par(mfrow=c(3,1))
barplot(t(as.matrix(K1Q)),
col=rainbow(2),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
border=NA)
barplot(t(as.matrix(K2Q)),
col=rainbow(2),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
border=NA)
barplot(t(as.matrix(K3Q)),
col=rainbow(3),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
border=NA)
barplot(t(as.matrix(K3Q)),
col=rainbow(3),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
main="K=3",
border=NA)
barplot(t(as.matrix(K2Q)),
col=rainbow(2),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
main="K=2",
border=NA)
barplot(t(as.matrix(K1Q)),
col=rainbow(2),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
main= "K=1",
border=NA)
barplot(t(as.matrix(K2Q)),
col=rainbow(2),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
main="K=2",
border=NA)
barplot(t(as.matrix(K3Q)),
col=rainbow(3),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
main="K=3",
border=NA)
par(mfrow=c(3,1))
barplot(t(as.matrix(K1Q)),
col=rainbow(2),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
main= "K=1",
border=NA)
barplot(t(as.matrix(K2Q)),
col=rainbow(2),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
main="K=2",
border=NA)
barplot(t(as.matrix(K3Q)),
col=rainbow(3),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
main="K=3",
border=NA)
K1Q <- read.table("biallelic_hwe0.01.recode.vcf.1.Q")
K2Q <- read.table("biallelic_hwe0.01.recode.vcf.2.Q")
K3Q <- read.table("biallelic_hwe0.01.recode.vcf.3.Q")
par(mfrow=c(3,1))
barplot(t(as.matrix(K1Q)),
col=rainbow(2),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
main="K=1",
border=NA)
barplot(t(as.matrix(K2Q)),
col=rainbow(2),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
main="K=2",
border=NA)
barplot(t(as.matrix(K3Q)),
col=rainbow(3),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
main="K=2"
border=NA)
barplot(t(as.matrix(K3Q)),
col=rainbow(3),
names.arg=ssw_meta$Location,
cex.names=0.75,
xlab="Individual", ylab="Ancestry",
main="K=2",
border=NA)
