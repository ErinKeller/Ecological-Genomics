library("DESeq2")
library("DESeq2")
library("ggplot2")
setwd("C:/Users/Erin/OneDrive/Documents/UVM/UVM Spring 2017/Ecological Genomics/PBIO DATA")
library("DESeq2")
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S")) #sets that "healthy is the reference
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
summary(res)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ] # sum across all 77 samples has to be greater than 100 reads; 100 is a threshold (but this is arbitrary and we are just trying to keep the data set smaller so we can run it faster)
dim(dds)
dds <- dds[sample(nrow(dds), 1200), ] # this function random samples our data matrix by randomly sampling 1200 rows... 1200 just so it is smaller and faster to run # Don't do this for actual analyses!
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S")) #sets that "healthy is the reference
dds <- DESeq(dds)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health + location:health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))  #sets that "healthy is the reference
dds <- DESeq(dds, parallel=T)
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
res <- results(dds, name="locationsub.healthS")
res <- res[order(res$padj),]
head(res)
summary(res)
colData$group <- factor(paste0(colData$location, ".", colData$health, ".", colData$score))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
library("DESeq2")
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable) # convert to matrix so it can be run with the program
head(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds) # conds for conditions
colData <- as.data.frame(conds) # turn it into a data frame so it can be run with the program
head(colData)
colData$group <- factor(paste0(colData$location, ".", colData$health, ".", colData$score))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
res <- results(dds, contrast=list( c("groupint.H.0","groupsub.H.0"), c("groupint.S.1","groupsub.S.1")), listValues=c(1/2, -1/2))
res <- res[order(res$padj),]
head(res)
summary(res)
ddsTS <- DESeqDataSetFromMatrix(countData = countData, colData = colData, ~ health + day + health:day)
ddsTS <- ddsTS[ rowSums(counts(ddsTS)) > 100, ]
ddsTS <- ddsTS[sample(nrow(ddsTS), 1200), ]
dim(ddsTS)
ddsTS <- DESeq(ddsTS, parallel=T, test="LRT", reduced = ~ health + day)
source('C:/Users/Erin/OneDrive/Documents/UVM/UVM Spring 2017/Ecological Genomics/PBIO DATA/DESeq2_SSW_round2.R')
plotMA(res, main="DESeq2", ylim=c(-2,2))
d <- plotCounts(dds, gene="TRINITY_DN44744_c1_g2_TRINITY_DN44744_c1_g2_i2_g.17686_m.17686", intgroup=(c("health","day","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + ylim(0,500)
p
plotPCA(vsd, intgroup=c("score"))
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("score"))
plotPCA(vsd, intgroup=c("score"))
plotPCA(vsd, intgroup=c("health"))
plotMA(res, main="DESeq2", ylim=c(-2,2))
d <- plotCounts(dds, gene="TRINITY_DN44744_c1_g2_TRINITY_DN44744_c1_g2_i2_g.17686_m.17686", intgroup=(c("health","day","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + ylim(0,500)
p
d <- plotCounts(dds, gene="TRINITY_DN46245_c3_g3_TRINITY_DN46245_c3_g3_i2_g.21719_m.21719", intgroup=(c("health","score","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= score, y=count, shape = health, color = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
p <- ggplot(d, aes(x=score, y=count, color=health, group=health))
p <- p +  geom_point() + stat_smooth(se=FALSE,method="loess") +  scale_y_log10()
p
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("score"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
options(stringsAsFactors = FALSE);
StarData = read.csv("norm.counts.csv");
starData = read.csv("norm.counts.csv");
dim(starData);
names(starData);
datExpr0 = as.data.frame(t(femData[, -c(1:8)]));
sdatExpr0 = as.data.frame(t(starData[, -c(1:1)]));
dim(sdatExpr0)
names(sdatExpr0) = starData$X;
rownames(sdatExpr0) = names(starData)[-c(1:1)];
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3); # sgsg denotes our data run this one!
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3); # sgsg denotes our data run this one!
sdatExpr0 = as.data.frame(t(starData[, -c(1:1)]));
dim(sdatExpr0)
names(sdatExpr0) = starData$X;
rownames(sdatExpr0) = names(starData)[-c(1:1)];
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3); # sgsg denotes our data run this one!
sgsg$allOK
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3); # sgsg denotes our data run this one!
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3); # sgsg denotes our data run this one!
help(goodSamplesGenes)
??goodSamplesGenes
library(wgcna)
library("WGCNA")
("WGCNA")
library("WGCNA")
library("WGCNA")
install.packages("WGCNA")
library("WGCNA")
library(WGCNA);
options(stringsAsFactors = FALSE);
starData = read.csv("norm.counts.csv");
dim(starData);
names(starData);
sdatExpr0 = as.data.frame(t(starData[, -c(1:1)]));
dim(sdatExpr0)
names(sdatExpr0) = starData$X;
rownames(sdatExpr0) = names(starData)[-c(1:1)];
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3); # sgsg denotes our data run this one!
sgsg$allOK
if (!sgsg$allOK)
{
# Optionally, print the gene and sample names that were removed:
if (sum(!sgsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(sdatExpr0)[!sgsg$goodGenes], collapse = ", ")));
if (sum(!sgsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(sdatExpr0)[!sgsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[sgsg$goodSamples, sgsg$goodGenes]
}
sampleTree = hclust(dist(sdatExpr0), method = "average");
sizeGrWindow(12,9)
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
abline(h = 10, col = "red");
clust = cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
table(clust)
keepSamples = (clust==1)
sdatExpr = sdatExpr0[keepSamples, ]
nGenes = ncol(sdatExpr)
nSamples = nrow(sdatExpr)
traitData = read.csv("ClinicalTraits.csv");
straitData = read.table("cols_data_trim.txt");
dim(straitData)
names(straitData)
starSamples = rownames(sdatExpr);
straitData = read.table("cols_data_trim.txt");
summary(resInt)
library(DESeq2)
library("ggplot2")
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
colData <- as.data.frame(conds)
head(conds)
head(colData)
head(IntConds)
dim(IntConds)
SubConds <- conds[conds$location == "sub",]
head(SubConds)
dim(SubConds)
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
dim(countsTable)
countData <- as.matrix(countsTable)
head(countData)
IntcountData<-countData[, which(colnames(countData) %in% row.names(IntConds))]
SubcountData<-countData[, -which(colnames(countData) %in% row.names(IntConds))]
dim(IntcountData)
